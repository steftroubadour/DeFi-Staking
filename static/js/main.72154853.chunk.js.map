{"version":3,"sources":["getWeb3.js","components/Pool.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Pool","props","updateValues","updatePoolTokenPrice","updatePoolBalance","updateUserBalanceInPool","updatePoolTokenUserBalance","updateUserPendingRewards","networkId","poolTokenPriceFeedContract","methods","latestRoundData","call","then","roundData","setState","poolTokenPrice","utils","fromWei","answer","contract","getPoolBalance","pool","token","address","balance","Number","toFixed","getUserBalanceInPool","user","account","userStakeAmount","pendingReward","from","userPendingRewards","poolTokenInstance","balanceOf","userBalance","doStake","isPerforming","allowance","_address","result","error","isStakeModalShown","BN","toWei","amountToStake","value","approve","send","status","stake","doUnstake","unstake","poolToken","name","symbol","decimals","icon","yield","rewardToken","toLowerCase","rewardTokenBalance","updateRewardTokenBalance","retrievePoolPriceFeed","state","poolBalance","rewardTokenPrice","this","pools","parseInt","eth","Contract","ERC20Contract","abi","aggregatorV3InterfaceABI","poolTokenPriceFeed","Card","className","style","width","Header","alt","title","src","Body","Row","Col","Footer","Button","variant","onClick","Spinner","as","animation","size","Modal","show","centered","backdrop","Title","Form","Group","Control","type","id","ref","input","Component","App","accounts","poolsAddresses","isContractOwner","isAddingPool","newPool","prideFeed","rewardTokenPriceFeedContract","rewardTokenInstance","componentDidMount","getAccounts","net","getId","deployedNetwork","DeFiStakingContract","networks","instance","initialize","alert","rewardTokenAddress","rewardTokenPriceFeed","rewardTokenName","rewardTokenSymbol","rewardTokenDecimals","subscribeEthereumEvents","retrieveIsContractOwner","subscribeContractsEvents","on","location","reload","events","PoolAdded","event","Staked","Unstaked","updateRewardTokenPrice","updatePoolsAddresses","owner","poolTokenAddress","priceFeed","getPools","addPool","string","substring","slice","Navbar","bg","Brand","Collapse","Text","ellipsis","Container","display","justifyContent","Label","map","index","retrieveRewardTokenBalance","key","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72154853.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3","import React, { Component } from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport ERC20Contract from \"../contracts/ERC20.json\";\r\n\r\nclass Pool extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.web3 = this.props.web3\r\n    this.contract = this.props.contract\r\n    this.networkId = this.props.networkId\r\n    this.pool = {\r\n      token: {\r\n        address: this.props.poolToken,\r\n        name: null,\r\n        symbol: null,\r\n        decimals: null,\r\n        icon: null\r\n      },\r\n      yield: 0,\r\n    }\r\n    this.rewardToken =  {\r\n      address: this.props.rewardToken.address,\r\n      name: this.props.rewardToken.name,\r\n      symbol: this.props.rewardToken.symbol,\r\n      decimals: this.props.rewardToken.decimals,\r\n      icon: './images/tokens/' + this.props.rewardToken.symbol.toLowerCase() + '.svg',\r\n    }\r\n    this.user = {\r\n      account: this.props.account,\r\n      rewardTokenBalance: this.props.rewardTokenBalance,\r\n    }\r\n    // functions\r\n    this.updateRewardTokenBalance = this.props.updateRewardTokenBalance // .bind(this) si on a besoin du contexte de Pool\r\n    this.retrievePoolPriceFeed = this.props.retrievePoolPriceFeed // Ici on a bien besoin du contexte de App, donc rien\r\n    //\r\n    this.amountToStake = 0\r\n\r\n    this.state = {\r\n      poolBalance: 0,\r\n      userStakeAmount: 0,\r\n      userPendingRewards: 0,\r\n      userBalance: 0,\r\n\r\n      isStakeModalShown: false,\r\n      isPerforming: false,\r\n\r\n      rewardTokenPrice: this.props.rewardTokenPrice,\r\n      poolTokenPrice: 0\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const pool = await this.contract.methods.pools(this.pool.token.address).call()\r\n    this.pool.yield = parseInt(pool.yield)\r\n\r\n    this.poolTokenInstance = new this.web3.eth.Contract(ERC20Contract.abi, this.pool.token.address)\r\n\r\n    const symbol = await this.poolTokenInstance.methods.symbol().call()\r\n    this.pool.token.symbol = symbol\r\n    this.pool.token.icon = './images/tokens/' + symbol.toLowerCase() + '.svg'\r\n\r\n    this.pool.token.name = await this.poolTokenInstance.methods.name().call()\r\n    this.pool.token.decimals = await this.poolTokenInstance.methods.decimals().call()\r\n\r\n    const aggregatorV3InterfaceABI = [{ \"inputs\": [], \"name\": \"decimals\", \"outputs\": [{ \"internalType\": \"uint8\", \"name\": \"\", \"type\": \"uint8\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"description\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint80\", \"name\": \"_roundId\", \"type\": \"uint80\" }], \"name\": \"getRoundData\", \"outputs\": [{ \"internalType\": \"uint80\", \"name\": \"roundId\", \"type\": \"uint80\" }, { \"internalType\": \"int256\", \"name\": \"answer\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"startedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"updatedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint80\", \"name\": \"answeredInRound\", \"type\": \"uint80\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"latestRoundData\", \"outputs\": [{ \"internalType\": \"uint80\", \"name\": \"roundId\", \"type\": \"uint80\" }, { \"internalType\": \"int256\", \"name\": \"answer\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"startedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"updatedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint80\", \"name\": \"answeredInRound\", \"type\": \"uint80\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"version\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }]\r\n    const poolTokenPriceFeed = await this.retrievePoolPriceFeed(this.pool.token.address)\r\n    this.poolTokenPriceFeedContract = new this.web3.eth.Contract(aggregatorV3InterfaceABI, poolTokenPriceFeed)\r\n\r\n    this.updateValues()\r\n  }\r\n\r\n  updateValues = () => {\r\n    this.updatePoolTokenPrice()\r\n    this.updatePoolBalance()\r\n    this.updateUserBalanceInPool()\r\n    this.updatePoolTokenUserBalance()\r\n    this.updateUserPendingRewards()\r\n  }\r\n\r\n  updatePoolTokenPrice = () => {\r\n    if (this.networkId === 1337) {\r\n      this.setState({ poolTokenPrice : 1 })\r\n\r\n      return\r\n    }\r\n\r\n    this.poolTokenPriceFeedContract.methods.latestRoundData().call()\r\n      .then((roundData) => {\r\n        this.setState({ poolTokenPrice: this.web3.utils.fromWei(roundData.answer + \"0000000000\", 'ether') })\r\n      })\r\n  }\r\n\r\n  updatePoolBalance = () => {\r\n    this.contract.methods.getPoolBalance(this.pool.token.address).call()\r\n      .then((balance) => this.pool.balance = Number(this.web3.utils.fromWei(balance, 'ether')).toFixed(2))\r\n  }\r\n\r\n  updateUserBalanceInPool = () => {\r\n    this.contract.methods.getUserBalanceInPool(this.pool.token.address, this.user.account).call()\r\n      .then((balance) => {\r\n        this.setState({ userStakeAmount: Number(this.web3.utils.fromWei(balance, 'ether'))})\r\n      })\r\n  }\r\n\r\n  updateUserPendingRewards = () => {\r\n    this.contract.methods.pendingReward(this.pool.token.address).call({ from: this.user.account })\r\n      .then((balance) => {\r\n        this.setState({ userPendingRewards: Number(this.web3.utils.fromWei(balance, 'ether'))})\r\n      })\r\n  }\r\n\r\n  updatePoolTokenUserBalance = () => {\r\n    this.poolTokenInstance.methods.balanceOf(this.user.account).call()\r\n      .then((balance) => this.setState( { userBalance: Number(this.web3.utils.fromWei(balance, 'ether')) }))\r\n  }\r\n\r\n  doStake = async () => {\r\n    if (!this.poolTokenInstance || !this.user.account) {\r\n      return\r\n    }\r\n\r\n    this.setState({ isPerforming: true })\r\n\r\n    let result\r\n    try {\r\n      result = await this.poolTokenInstance.methods.allowance(this.user.account, this.contract._address).call()\r\n    } catch(error) {\r\n      console.error(error)\r\n      this.setState({isPerforming: false})\r\n      this.setState({isStakeModalShown: false})\r\n      return\r\n    }\r\n\r\n    if (new this.web3.utils.BN(result) < new this.web3.utils.BN(this.web3.utils.toWei(this.amountToStake.value, \"ether\"))) {\r\n      try {\r\n        result = await this.poolTokenInstance.methods.approve(this.contract._address, this.web3.utils.toWei(this.amountToStake.value, \"ether\")).send({ from: this.user.account })\r\n        if (result.status !== true) {\r\n          this.setState({ isPerforming: false })\r\n          this.setState({ isStakeModalShown: false })\r\n          return\r\n        }\r\n      } catch(error) {\r\n        console.error(error)\r\n        this.setState({isPerforming: false})\r\n        this.setState({isStakeModalShown: false})\r\n        return\r\n      }\r\n    }\r\n\r\n    this.contract.methods.stake(this.pool.token.address, this.web3.utils.toWei(this.amountToStake.value, \"ether\")).send({from: this.user.account})\r\n      .then((result) => {\r\n        this.updateValues()\r\n\r\n        this.setState({ isPerforming: false })\r\n        this.setState({ isStakeModalShown: false })\r\n    })\r\n  }\r\n\r\n  doUnstake = async () => {\r\n    this.contract.methods.unstake(this.pool.token.address).send({from: this.user.account})\r\n      .then((result) => {\r\n        this.updateValues()\r\n        this.setState({ isPerforming: false })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    /*if (!this.pool.token.symbol) {\r\n      return <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\r\n    }*/\r\n    return (\r\n      <>\r\n        <Card className=\"m-1 d-inline-flex\" style={{ width: 'calc((100% - 2rem)/4)' }}>\r\n          <Card.Header className=\"text-center\">\r\n            stake <span className=\"symbol\">{ this.pool.token.symbol }</span>\r\n            <img\r\n              className=\"token\"\r\n              alt={ this.pool.token.name }\r\n              title={ this.pool.token.name }\r\n              src={ this.pool.token.icon } />\r\n            earn <span className=\"symbol\">{ this.rewardToken.symbol }</span>\r\n            <img\r\n              className=\"token\"\r\n              alt={ this.rewardToken.name }\r\n              title={ this.rewardToken.name }\r\n              src={ this.rewardToken.icon } />\r\n            <br />\r\n            APR: { this.pool.yield } %\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Row>\r\n              <div className=\"title\">{ this.rewardToken.symbol } earned</div>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                { this.state.userPendingRewards.toFixed(6) }\r\n              </Col>\r\n              <Col className=\"right\">\r\n                { (this.state.userPendingRewards * this.state.rewardTokenPrice).toFixed(6) } $\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <div className=\"title\">{ this.pool.token.symbol } stacked</div>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                { this.state.userStakeAmount.toFixed(4) }\r\n              </Col>\r\n              <Col className=\"right\">\r\n                { (this.state.userStakeAmount * this.state.poolTokenPrice).toFixed(6) } $\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <Row>\r\n              <Button\r\n                variant=\"primary\"\r\n                onClick={this.state.userStakeAmount === 0 ? () => this.setState({ isStakeModalShown: true }) : this.doUnstake }\r\n                >\r\n                { this.state.isPerforming ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" /> : this.state.userStakeAmount === 0 ? \"Stake \" + this.pool.token.symbol : \"Unstake \" + this.pool.token.symbol}\r\n              </Button>\r\n            </Row>\r\n          </Card.Footer>\r\n        </Card>\r\n\r\n        <Modal show={ this.state.isStakeModalShown } centered backdrop=\"static\" >\r\n          <Modal.Header>\r\n            <Modal.Title>{ this.pool.token.symbol } staking</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form>\r\n              <Form.Group>\r\n                My { this.pool.token.symbol } balance: { this.state.userBalance }\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Control type=\"text\" id=\"amountToStake\"\r\n                              ref={(input) => {\r\n                                this.amountToStake = input\r\n                              }}\r\n                />\r\n              </Form.Group>\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={ this.doStake }>{ this.state.isPerforming ? <Spinner as=\"span\" animation=\"border\" size=\"sm\" /> : \"Stake \" + this.pool.token.symbol }</Button>\r\n            <Button variant=\"secondary\" onClick={() => this.setState({ isStakeModalShown: false })}>Cancel</Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pool","import React, { Component } from \"react\"\nimport DeFiStakingContract from \"./contracts/DeFiStaking.json\"\nimport ERC20Contract from \"./contracts/ERC20.json\"\nimport getWeb3 from \"./getWeb3\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Row from 'react-bootstrap/Row'\nimport Spinner from \"react-bootstrap/Spinner\"\n\nimport Pool from './components/Pool'\n\nimport \"./App.css\"\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    contract: null,\n    poolsAddresses: [],\n    rewardTokenPrice: null,\n    rewardTokenBalance: 0,\n    isContractOwner: false,\n    isAddingPool: false\n  }\n\n  newPool = {\n    token: null,\n    prideFeed: null,\n    yield: null\n  }\n\n  networkId = null\n\n  rewardTokenPriceFeedContract = null\n  rewardTokenInstance = null\n  rewardToken =  {\n    address: null,\n    name: null,\n    symbol: null,\n    decimals: null,\n    icon: null,\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3()\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts()\n      this.setState({ accounts: accounts })\n\n      // Get the contract instance.\n      this.networkId = await web3.eth.net.getId()\n      const deployedNetwork = DeFiStakingContract.networks[this.networkId]\n\n      const instance = new web3.eth.Contract(\n        DeFiStakingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      this.setState({ web3: web3, accounts: accounts, contract: instance }, this.initialize)\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`,)\n      console.error(error);\n    }\n  }\n\n  initialize = async () => {\n    const { contract, web3 } = this.state\n    const rewardTokenAddress = await contract.methods.rewardToken().call()\n\n    const aggregatorV3InterfaceABI = [{ \"inputs\": [], \"name\": \"decimals\", \"outputs\": [{ \"internalType\": \"uint8\", \"name\": \"\", \"type\": \"uint8\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"description\", \"outputs\": [{ \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [{ \"internalType\": \"uint80\", \"name\": \"_roundId\", \"type\": \"uint80\" }], \"name\": \"getRoundData\", \"outputs\": [{ \"internalType\": \"uint80\", \"name\": \"roundId\", \"type\": \"uint80\" }, { \"internalType\": \"int256\", \"name\": \"answer\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"startedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"updatedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint80\", \"name\": \"answeredInRound\", \"type\": \"uint80\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"latestRoundData\", \"outputs\": [{ \"internalType\": \"uint80\", \"name\": \"roundId\", \"type\": \"uint80\" }, { \"internalType\": \"int256\", \"name\": \"answer\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"startedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"updatedAt\", \"type\": \"uint256\" }, { \"internalType\": \"uint80\", \"name\": \"answeredInRound\", \"type\": \"uint80\" }], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"version\", \"outputs\": [{ \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }], \"stateMutability\": \"view\", \"type\": \"function\" }]\n    const rewardTokenPriceFeed = await this.retrievePoolPriceFeed(rewardTokenAddress)\n    this.rewardTokenPriceFeedContract = new web3.eth.Contract(aggregatorV3InterfaceABI, rewardTokenPriceFeed)\n\n    this.rewardTokenInstance = new web3.eth.Contract(ERC20Contract.abi, rewardTokenAddress);\n\n    const rewardTokenName = await this.rewardTokenInstance.methods.name().call()\n    const rewardTokenSymbol = await this.rewardTokenInstance.methods.symbol().call()\n    const rewardTokenDecimals = await this.rewardTokenInstance.methods.decimals().call()\n\n    this.rewardToken = {\n      address: rewardTokenAddress,\n      name: rewardTokenName,\n      symbol: rewardTokenSymbol,\n      decimals: rewardTokenDecimals,\n      icon: './images/tokens/' + rewardTokenSymbol.toLowerCase() + '.svg'\n    }\n\n    this.subscribeEthereumEvents()\n\n    const isContractOwner = await this.retrieveIsContractOwner()\n    this.setState({ isContractOwner: isContractOwner })\n\n    this.subscribeContractsEvents()\n\n    this.updateValues()\n\n  }\n\n  subscribeEthereumEvents = () => {\n    window.ethereum.on('accountsChanged', accounts => {\n      console.log(`Accounts updated: ${accounts}`)\n      window.location.reload()\n    })\n\n    window.ethereum.on('chainChanged', networkId => {\n      console.log(`Network updated: ${networkId}`)\n      window.location.reload()\n    })\n  }\n\n  subscribeContractsEvents = () => {\n    const { contract } = this.state;\n\n    contract.events.PoolAdded((error, event) => {\n      if (!error) {\n        this.updateValues()\n\n        return\n      }\n\n      console.error(error)\n    })\n    contract.events.Staked((error, event) => {\n      if (!error) {\n        this.updateValues()\n\n        return\n      }\n\n      console.error(error)\n    })\n    contract.events.Unstaked((error, event) => {\n      if (!error) {\n        this.updateValues()\n\n        return\n      }\n\n      console.error(error)\n    })\n  }\n\n  updateValues = () => {\n    this.updateRewardTokenPrice()\n    this.updateRewardTokenBalance()\n    this.updatePoolsAddresses()\n  }\n\n  retrieveIsContractOwner = async () => {\n    const { contract, accounts } = this.state\n\n    try {\n      const result = await contract.methods.owner().call()\n\n      return result === accounts[0]\n\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  retrievePoolPriceFeed = async (poolTokenAddress) => {\n    try {\n      const pool = await this.state.contract.methods.pools(poolTokenAddress).call()\n\n      return pool.priceFeed\n\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  updateRewardTokenPrice = () => {\n    if (this.networkId === 1337) {\n      this.setState({ rewardTokenPrice : 1 })\n\n      return\n    }\n\n    this.rewardTokenPriceFeedContract.methods.latestRoundData().call()\n      .then((roundData) => {\n        this.setState({ rewardTokenPrice: this.state.web3.utils.fromWei(roundData.answer + \"0000000000\", 'ether') })\n      })\n  }\n\n\n  updateRewardTokenBalance = () => {\n    this.rewardTokenInstance.methods.balanceOf(this.state.accounts[0]).call().then((balance) => {\n      this.setState({ rewardTokenBalance: Number(this.state.web3.utils.fromWei(balance, 'ether')) })\n    })\n  }\n\n  updatePoolsAddresses = () => {\n    this.state.contract.methods.getPools().call()\n      .then((poolsAddresses) => this.setState({ poolsAddresses: poolsAddresses }))\n  }\n\n  ellipsis(string) {\n    return string.substring(0, 4) + '...' + string.slice(-4);\n  }\n\n  addPool = async () => {\n    const { contract, accounts } = this.state;\n    this.setState({ isAddingPool: true });\n\n    const pool = this.newPool\n\n    try {\n      await contract.methods.addPool(pool.token.value, pool.prideFeed.value, pool.yield.value).send({ from: accounts[0] })\n\n    } catch (error) {\n      console.error(error)\n    }\n\n    this.setState({ isAddingPool: false });\n  }\n\n  render() {\n    let isReadyToRender = false\n    isReadyToRender = this.state.accounts && this.state.web3 && this.state.rewardTokenPrice\n\n    if (!isReadyToRender) {\n      return <p>Loading Web3, accounts, and contract... </p>;\n    }\n\n    return (\n      <>\n        <Navbar className=\"px-3\" bg=\"light\">\n          <Navbar.Brand className=\"brand\">\n            DeFi Staking App\n          </Navbar.Brand>\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Navbar.Text>\n              <img\n                className=\"token\"\n                alt={ this.rewardToken.name }\n                title={ this.rewardToken.name }\n                src={ this.rewardToken.icon } /> price: { this.state.rewardTokenPrice } $\n              <Button className=\"mx-3\" variant=\"outline-primary\">{ this.state.accounts ? this.ellipsis(this.state.accounts[0]) : 'Connect' }</Button>\n            </Navbar.Text>\n          </Navbar.Collapse>\n        </Navbar>\n\n        <Container>\n          {/*Begin admin*/}\n          {this.state.isContractOwner ?\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n            <Card>\n              <Card.Header className=\"text-center\"><strong>Add a new pool</strong></Card.Header>\n              <Card.Body className=\"text-center\">\n                <Form id=\"addPool\">\n                  <Row className=\"mb-3\">\n                    <Form.Group as={Col}>\n                      <Form.Label>Token address</Form.Label>\n                      <Form.Control type=\"text\" id=\"poolTokenAddress\"\n                                    ref={(input) => {\n                                      this.newPool.token = input\n                                    }}\n                      />\n                    </Form.Group>\n\n                    <Form.Group as={Col}>\n                      <Form.Label>Token price feed</Form.Label>\n                      <Form.Control type=\"text\" id=\"poolTokenPriceFeed\"\n                                    ref={(input) => {\n                                      this.newPool.prideFeed = input\n                                    }}\n                      />\n                    </Form.Group>\n\n                    <Form.Group as={Col}>\n                      <Form.Label>Yield in %</Form.Label>\n                      <Form.Control type=\"text\" id=\"poolYield\"\n                                    ref={(input) => {\n                                      this.newPool.yield = input\n                                    }}\n                      />\n                    </Form.Group>\n                  </Row>\n\n                  <Button variant=\"primary\" onClick={ this.addPool }>\n                    { this.state.isAddingPool ?\n                      <Spinner as=\"span\" animation=\"border\" size=\"sm\" />\n                      : \"Add\" }\n                  </Button>\n                </Form>\n              </Card.Body>\n            </Card>\n          </div> : <></>}\n          {/*End admin*/}\n          <div>\n            { this.state.poolsAddresses.map((poolToken, index) => (\n              <Pool web3={this.state.web3}\n                    contract={this.state.contract}\n                    account={this.state.accounts[0]}\n                    retrieveRewardTokenBalance={this.retrieveRewardTokenBalance}\n                    retrievePoolPriceFeed={this.retrievePoolPriceFeed}\n                    id={index}\n                    key={index}\n                    poolToken={poolToken}\n                    rewardToken={this.rewardToken}\n                    rewardTokenPrice={this.state.rewardTokenPrice}\n                    rewardTokenBalance={this.state.rewardTokenBalance}\n                    networkId = {this.networkId}\n              />\n            ))}\n          </div>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}